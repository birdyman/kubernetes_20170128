Instruction for Workshop 2.5 Kubernetes in RealWorld:
Note: This instruction will start lab for kubernetes for real workshop:
====================================================
Lab Description:
VMName:							Machine name		Roles:						IP Address:
kubernetes-ms					kubernetes-ms		Master						10.38.14.200
kubernetes-1					kubernetes-1		NodePort					10.38.14.201
kubernetes-2					kubernetes-2		NodePort					10.38.14.102

===================================================
Username: docker	
Password: <you know>
===================================================
Part 1: Setup Docker and Kubernetest Binary: (Apply all node)
===================================================
1. SCP script (initialsetup.sh) from local to Kubernetes Machine (/home/<user>/initialsetup.sh):

2. Start setup docker and kubernetes by command:
	sudo chmod +x *.sh
	./initialsetup.sh
	
3. Relogon System and Test docker command:  docker run hello-world

4. Modify iptables by command:
	4.1: sudo su -
	4.2: iptables-save > /etc/iptables.conf
	4.3: vi /etc/iptables.conf ==> change ":FORWARD DROP [0:0]" to ":FORWARD ACCEPT [0:0]"
	4.4: iptables-restore < /etc/iptables.conf

===================================================
Part 2: Initial Kubernetes Cluster
===================================================
1. (kubernetes-ms) initial cluster by command:
	sudo su -
	kubeadm init --kubernetes-version=v1.7.0 --pod-network-cidr=10.244.0.0/16 --token 8c2350.f55343444a6ffc46
	exit

	*Remark: output of this command will generate token that need to keep:
	-------------------------------------------------
	Sample Output:
	-------------------------------------------------
	[kubeadm] WARNING: kubeadm is in beta, please do not use it for production clusters.
	[init] Using Kubernetes version: v1.7.0
	[init] Using Authorization modes: [Node RBAC]
	[preflight] Running pre-flight checks
	[preflight] WARNING: docker version is greater than the most recently validated version. Docker version: 17.06.0-ce. Max validated version: 1.12
	[certificates] Generated CA certificate and key.
	[certificates] Generated API server certificate and key.
	[certificates] API Server serving cert is signed for DNS names [kubeserve-ms kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.99.200]
	[certificates] Generated API server kubelet client certificate and key.
	[certificates] Generated service account token signing key and public key.
	[certificates] Generated front-proxy CA certificate and key.
	[certificates] Generated front-proxy client certificate and key.
	[certificates] Valid certificates and keys now exist in "/etc/kubernetes/pki"
	[kubeconfig] Wrote KubeConfig file to disk: "/etc/kubernetes/admin.conf"
	[kubeconfig] Wrote KubeConfig file to disk: "/etc/kubernetes/kubelet.conf"
	[kubeconfig] Wrote KubeConfig file to disk: "/etc/kubernetes/controller-manager.conf"
	[kubeconfig] Wrote KubeConfig file to disk: "/etc/kubernetes/scheduler.conf"
	[apiclient] Created API client, waiting for the control plane to become ready
	[apiclient] All control plane components are healthy after 64.501528 seconds
	[token] Using token: b2aa8c.e6d1e0a724c3f50e
	[apiconfig] Created RBAC rules
	[addons] Applied essential addon: kube-proxy
	[addons] Applied essential addon: kube-dns

	Your Kubernetes master has initialized successfully!

	To start using your cluster, you need to run (as a regular user):

	  mkdir -p $HOME/.kube
	  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
	  sudo chown $(id -u):$(id -g) $HOME/.kube/config

	You should now deploy a pod network to the cluster.
	Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
	  http://kubernetes.io/docs/admin/addons/

	You can now join any number of machines by running the following on each node
	as root:

	  kubeadm join --token 8c2350.f55343444a6ffc46 10.38.14.200:6443
	-------------------------------------------------
2. (kubernetes-ms) Setup run cluster system by command (Regular User):
		  mkdir -p $HOME/.kube
		  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
		  sudo chown $(id -u):$(id -g) $HOME/.kube/config
		  kubectl taint nodes --all node-role.kubernetes.io/master-


4. (kubernetes-ms) Create flennel net plugin for network for cluster by command:
	kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
    kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.8.0/Documentation/kube-flannel-rbac.yml
	
5. (kubernetes-ms) Check master readyness and dns by command (Take 5 - 10 min):
	kubectl get pods --all-namespaces
	kubectl describe pods <kube-dns name> --namespace kube-system
	
	-------------------------------------------------
	Sample Output
	-------------------------------------------------
NAMESPACE     NAME                                   READY     STATUS    RESTARTS   AGE
kube-system   etcd-ubuntumaster                      1/1       Running   0          38m
kube-system   kube-apiserver-ubuntumaster            1/1       Running   0          38m
kube-system   kube-controller-manager-ubuntumaster   1/1       Running   0          38m
kube-system   kube-dns-2425271678-hh0br              3/3       Running   0          43m
kube-system   kube-flannel-ds-738kk                  1/1       Running   0          13m
kube-system   kube-proxy-tf8pm                       1/1       Running   0          43m
kube-system   kube-scheduler-ubuntumaster            1/1       Running   0          38m
	-------------------------------------------------
6. (kubernetes-ms) Install dashboard by command:
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml
kubectl apply -f https://github.com/kubernetes/heapster/raw/master/deploy/kube-config/rbac/heapster-rbac.yaml
kubectl apply -f https://github.com/kubernetes/heapster/raw/master/deploy/kube-config/influxdb/heapster.yaml
kubectl apply -f https://raw.githubusercontent.com/kubernetes/heapster/master/deploy/kube-config/influxdb/influxdb.yaml
kubectl create clusterrolebinding insecure-dashboard --clusterrole=cluster-admin --serviceaccount=kube-system:kubernetes-dashboard
kubectl get pods --all-namespaces

7. (kubernetes-ms) Check readyness by command:
	kubectl get pods --all-namespaces

8. (kubernetes-ms) Open dashboard by command:
kubectl proxy --address 10.38.14.200 --accept-hosts '.*'

9. (local) Open browser by command
http://10.38.14.200:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/

10. (kubernetes-1),(kubernetes-2) ssh and join to cluster by command:
	sudo su -
	kubeadm join --token 8c2350.f55343444a6ffc46 10.38.14.200:6443
	exit

	-------------------------------------------------
	Sample Output
	-------------------------------------------------
[kubeadm] WARNING: kubeadm is in beta, please do not use it for production clusters.
[preflight] Running pre-flight checks
[preflight] Some fatal errors occurred:
	user is not running as root
[preflight] If you know what you are doing, you can skip pre-flight checks with `--skip-preflight-checks`
kubeadmin@kubeserve-1:~$ sudo kubeadm join --token 78435a.f1eb236036e232ff 10.38.14.200:6443
[sudo] password for kubeadmin:
[kubeadm] WARNING: kubeadm is in beta, please do not use it for production clusters.
[preflight] Running pre-flight checks
[preflight] WARNING: docker version is greater than the most recently validated version. Docker version: 17.06.0-ce. Max validated version: 1.12
[discovery] Trying to connect to API Server "10.38.14.200:6443"
[discovery] Created cluster-info discovery client, requesting info from "https://10.38.14.200:6443"
[discovery] Cluster info signature and contents are valid, will use API Server "https://10.38.14.200:6443"
[discovery] Successfully established connection with API Server "10.38.14.200:6443"
[bootstrap] Detected server version: v1.7.0
[bootstrap] The server supports the Certificates API (certificates.k8s.io/v1beta1)
[csr] Created API client to obtain unique certificate for this node, generating keys and certificate signing request
[csr] Received signed certificate from the API server, generating KubeConfig...
[kubeconfig] Wrote KubeConfig file to disk: "/etc/kubernetes/kubelet.conf"

Node join complete:
* Certificate signing request sent to master and response
  received.
* Kubelet informed of new secure connection details.

Run 'kubectl get nodes' on the master to see this machine join.
	-------------------------------------------------

11. (kubernetes-ms) Check Node in Cluster by command (This take 5 - 10 min):
kubectl get nodes

-------------------------------------------------
Sample Output
-------------------------------------------------
NAME           STATUS    AGE       VERSION
kubernetes-ms   Ready     47m       v1.7.0
kubernetes-1    Ready     2m        v1.7.0
kubernetes-2    Ready     2m        v1.7.0
-------------------------------------------------

12. (kubernetes-ms)Check Pods from all cluster system running by command:
kubectl get pods --all-namespaces

-------------------------------------------------
Sample Output
-------------------------------------------------
NAMESPACE     NAME                                   READY     STATUS    RESTARTS   AGE
kube-system   etcd-ubuntumaster                      1/1       Running   0          42m
kube-system   kube-apiserver-ubuntumaster            1/1       Running   0          42m
kube-system   kube-controller-manager-ubuntumaster   1/1       Running   0          42m
kube-system   kube-dns-2425271678-hh0br              3/3       Running   0          47m
kube-system   kube-flannel-ds-738kk                  1/1       Running   0          17m
kube-system   kube-flannel-ds-8vqzx                  1/1       Running   1          2m
kube-system   kube-flannel-ds-kk51k                  1/1       Running   0          2m
kube-system   kube-proxy-cw698                       1/1       Running   0          2m
kube-system   kube-proxy-jv01t                       1/1       Running   0          2m
kube-system   kube-proxy-tf8pm                       1/1       Running   0          47m
kube-system   kube-scheduler-ubuntumaster            1/1       Running   0          42m
-------------------------------------------------

13. (all node) configure iptable for forward packet from host to container by command:
sudo iptables -P FORWARD ACCEPT

14. (kubernetes-ms) Test deployment basic nginx pods by command
kubectl run webtest --image=labdocker/nginx:latest --port=80
kubectl get pods -o wide
kubectl expose deployment webtest --target-port=80 --type=NodePort
kubectl get svc -o wide

15. (kubernetes-ms) Test get web inside farm by curl:
curl http://10.38.14.200:<port>
curl http://10.38.14.201:<port>
curl http://10.38.14.202:<port>


16. (kubeserve-ms) Cleanup Lab by command:
kubectl delete deployment/webtest
kubectl delete svc/webtest



